{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BeanService = /*#__PURE__*/(() => {\n  class BeanService {\n    constructor(http) {\n      this.http = http;\n      this.api = environment.apiUrl;\n    }\n\n    mapToBean(item) {\n      return {\n        id: item._id || item.id,\n        name: item.Name || item.name || '',\n        description: item.Description || item.description || '',\n        country: item.Country || item.country || '',\n        colour: item.colour || '',\n        cost: parseFloat(String(item.Cost || item.cost || 0).toString().replace('£', '')),\n        image: item.Image || item.image || ''\n      };\n    }\n\n    getBeans(filters) {\n      let params = new HttpParams();\n\n      for (const [k, v] of Object.entries(filters ?? {})) {\n        if (v !== undefined && v !== null && v !== '') {\n          params = params.set(k, String(v));\n        }\n      }\n\n      return this.http.get(`${this.api}/beans`, {\n        params\n      }).pipe(map(list => list.map(item => this.mapToBean(item))));\n    }\n\n    getAll() {\n      return this.http.get(`${this.api}/beans`).pipe(map(list => list.map(item => this.mapToBean(item))));\n    }\n\n    getBeanOfTheDay() {\n      return this.http.get(`${this.api}/beans/bean-of-the-day`).pipe(map(item => this.mapToBean(item)));\n    } // ✅ FIXED: strip id before sending to backend\n\n\n    placeOrder(order) {\n      const {\n        id,\n        ...payload\n      } = order;\n      return this.http.post(`${this.api}/orders`, payload);\n    }\n\n    getOrders() {\n      return this.http.get(`${this.api}/orders`);\n    }\n\n    getOrder(id) {\n      return this.http.get(`${this.api}/orders/${id}`);\n    }\n\n    updateOrder(order) {\n      return this.http.put(`${this.api}/orders/${order.id}`, order);\n    }\n\n    deleteOrder(id) {\n      return this.http.delete(`${this.api}/orders/${id}`);\n    }\n\n  }\n\n  BeanService.ɵfac = function BeanService_Factory(t) {\n    return new (t || BeanService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  BeanService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BeanService,\n    factory: BeanService.ɵfac,\n    providedIn: 'root'\n  });\n  return BeanService;\n})();","map":null,"metadata":{},"sourceType":"module"}